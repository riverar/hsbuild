<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <CleanFile          Condition=" '$(CleanFile)'  == '' "                         >$(MSBuildProjectFile).CleanList.txt</CleanFile>
  </PropertyGroup>

  <PropertyGroup>
    <VersionMajorMinor                                                              >$(VersionMajor).$(VersionMinor)</VersionMajorMinor>
    <VersionFull                                                                    >$(VersionMajor).$(VersionMinor).$(VersionMicro).$(VersionNano)</VersionFull>
  </PropertyGroup>

  <PropertyGroup>
    <BuildGenerateSourcesTargets>
      GenerateConfigHeader;
      GenerateIntermediateFiles;
      GenerateBisonFiles;
      GenerateFlexFiles;
      $(BuildGenerateSourcesTargets);
    </BuildGenerateSourcesTargets>

    <BuildInstallTargets>
      $(BuildInstallTargets);
      InstallData;
    </BuildInstallTargets>
  </PropertyGroup>

  <!-- Import all HSBUILD tasks -->
  <PropertyGroup>
      <HSBuildTasksDir        Condition=" '$(HSBuildTasksDir)' == '' and '$(MSBuildExtensionsPath32)' != '' ">$(MSBuildExtensionsPath32)\HSBuild\</HSBuildTasksDir>
      <HSBuildTasksDir        Condition=" '$(HSBuildTasksDir)' == '' or !Exists('$(HSBuildTasksDir)') "      >$(MSBuildExtensionsPath)\HSBuild\</HSBuildTasksDir>
      <HSBuildTasksBin        Condition=" '$(HSBuildTasksBin)' == '' "              >HSBuildTasks.dll</HSBuildTasksBin>
      <HSBuildTasksX86Bin     Condition=" '$(HSBuildTasksX86Bin)' == '' "           >HSBuildTasks.x86.dll</HSBuildTasksX86Bin>
      <HSBuildTasksX86_64Bin  Condition=" '$(HSBuildTasksX86_64Bin)' == '' "        >HSBuildTasks.x86_64.dll</HSBuildTasksX86_64Bin>
      <HSBuildTasksPath       Condition=" '$(HSBuildTasksPath)' == '' "             >$(HSBuildTasksDir)$(HSBuildTasksBin)</HSBuildTasksPath>
      <HSBuildTasksX86Path    Condition=" '$(HSBuildTasksX86Path)' == '' "          >$(HSBuildTasksDir)$(HSBuildTasksX86Bin)</HSBuildTasksX86Path>
      <HSBuildTasksX86_64Path Condition=" '$(HSBuildTasksX86_64Path)' == '' "       >$(HSBuildTasksDir)$(HSBuildTasksX86_64Bin)</HSBuildTasksX86_64Path>
      <HSBuildTemplates       Condition=" '$(HSBuildTemplates)' == '' "             >$(HSBuildTasksDir)templates\$(Platform)\</HSBuildTemplates>
  </PropertyGroup>

  <Import     Project="$(MSBuildToolsPath)\Microsoft.Common.Tasks" />
  <UsingTask  TaskName="Substitute"                AssemblyFile="$(HSBuildTasksPath)" />
  <UsingTask  TaskName="Aggregator"                AssemblyFile="$(HSBuildTasksPath)" />
  <UsingTask  TaskName="Copy2"                     AssemblyFile="$(HSBuildTasksPath)" />

  <Import     Project="HSBuild.PkgConfig.targets" />
  <Import     Project="HSBuild.BuildSteps.targets" />

  <!-- ======================================================================== -->
  <!--                             Generate targets                             -->
  <!-- ======================================================================== -->
  <!-- TARGET: Generate Config Header -->
  <Target
    Name="GenerateConfigHeader"
    Condition=" '$(DisableConfigHeaderGeneration)' != 'true' "
    >
      <ItemGroup>
          <AdditionalIncludeDirectories Include="$(IntDir)" />
      </ItemGroup>

      <PropertyGroup>
        <Package Condition=" '$(Package)' == '' ">$(MSBuildProjectName)</Package>
        <PackageName Condition=" '$(PackageName)' == '' ">$(PackageName)</PackageName>
        <PackageString Condition=" '$(PackageString)' == '' ">$(PackageName) $(Version)</PackageString>

        <ConfigHeader Condition=" '$(ConfigHeader)' == '' ">$(HSBuildTemplates)config.h</ConfigHeader>
      </PropertyGroup>

      <ItemGroup>
          <ConfigPreprocessor Include="VERSION &quot;$(Version)&quot;" />
          <ConfigPreprocessor Include="PACKAGE &quot;$(Package)&quot;" />
          <ConfigPreprocessor Include="PACKAGE_NAME &quot;$(PackageName)&quot;" />
          <ConfigPreprocessor Include="PACKAGE_STRING &quot;$(PackageString)&quot;" />
          <ConfigPreprocessor Include="PACKAGE_VERSION &quot;$(Version)&quot;" />
          <ConfigPreprocessor Include="PACKAGE_DATADIR &quot;inavlid-for-win32&quot;" />
      </ItemGroup>

      <!-- Always generate a new _config.h and give it the same modified time as config.h -->
      <Delete
        Files="$(IntDir)_config.h"
        Condition=" Exists('$(IntDir)_config.h') "
        />

      <Copy
        SourceFiles="$(ConfigHeader)"
        DestinationFiles="$(IntDir)_config.h"
        Condition=" Exists('$(ConfigHeader)')"
        />

      <WriteLinesToFile
        File="$(IntDir)_config.h"
        Lines="@(ConfigPreprocessor->'#define %(Identity)')"
        Condition=" '@(ConfigPreprocessor)' != '' and Exists('$(IntDir)_config.h') "
        Overwrite="false"
        />

      <Copy2
        SourceFiles="$(IntDir)_config.h"
        DestinationFiles="$(IntDir)config.h"
        >
          <Output TaskParameter="CopiedFiles" ItemName="FileWrites"/>
      </Copy2>

      <Delete
        Files="$(IntDir)_config.h"
        Condition=" Exists('$(IntDir)_config.h') "
        />
  </Target>

  <!-- TARGET: Generate intermediate files by substitution -->
  <Target
    Name="GenerateIntermediateFiles"
    Condition="'@(InFile)' != ''"
    >
      <MakeDir Condition="!Exists('$(IntDir)%(InFile.SubDirectory)')" Directories="$(IntDir)%(InFile.SubDirectory)" />

      <Substitute
        SourceFiles="@(InFile)"
        Expressions="%(InFile.Expressions)"
        OutputDirectory="$(IntDir)%(InFile.SubDirectory)"
        OutputFileName="%(InFile.OutputFileName)"
        >
          <Output TaskParameter="WrittenFiles" ItemName="FileWrites" />
      </Substitute>
  </Target>

  <!-- TARGET: Generate bison files -->
  <Target
    Name="GenerateBisonFiles"
    Condition="'@(Bison)' != ''"
    >
      <MakeDir Condition="!Exists('$(IntDir)%(Bison.SubDirectory)')" Directories="$(IntDir)%(Bison.SubDirectory)" />

      <Copy
        SourceFiles="@(Bison)"
        DestinationFolder="$(IntDir)%(Bison.SubDirectory)"
        SkipUnchangedFiles="true"
        />

      <Exec
        WorkingDirectory="$(IntDir)%(Bison.SubDirectory)"
        Command="&quot;$(HSBuildToolPath)bisonflex-dist.exe&quot; -y 1&gt;NUL"
        />

      <Exec
        WorkingDirectory="$(IntDir)%(Bison.SubDirectory)"
        Command="
          set M4=./bisonflex-dist/m4.exe
          set BISON_PKGDATADIR=./bisonflex-dist/bison
          &quot;bisonflex-dist/bison.exe&quot; -d -v -p%(Bison.Prefix) &quot;%(Bison.Filename)%(Bison.Extension)&quot; -o %(Bison.Filename).tab.c
        "
        />

      <ItemGroup>
        <Compile Condition=" '%(Bison.Compile)' == 'true' " Include="$(IntDir)%(Bison.SubDirectory)/%(Bison.Filename).tab.c" />
      </ItemGroup>

      <RemoveDir
        Directories="$(IntDir)%(Bison.SubDirectory)/bisonflex-dist"
        />
  </Target>

  <!-- TARGET: Generate flex files -->
  <Target
    Name="GenerateFlexFiles"
    Condition="'@(Flex)' != ''"
    >
      <MakeDir Condition="!Exists('$(IntDir)%(Flex.SubDirectory)')" Directories="$(IntDir)%(Flex.SubDirectory)" />

      <Copy
        SourceFiles="@(Flex)"
        DestinationFolder="$(IntDir)%(Flex.SubDirectory)"
        SkipUnchangedFiles="true"
        />

      <Exec
        WorkingDirectory="$(IntDir)%(Flex.SubDirectory)"
        Command="&quot;$(HSBuildToolPath)bisonflex-dist.exe&quot; -y 1&gt;NUL"
        />

      <Exec
        WorkingDirectory="$(IntDir)%(Flex.SubDirectory)"
        Command="
          set M4=./bisonflex-dist/m4.exe
          set BISON_PKGDATADIR=./bisonflex-dist/bison
          &quot;bisonflex-dist/flex.exe&quot; -P%(Flex.Prefix) -o lex.%(Flex.Prefix).c %(Flex.Filename)%(Flex.Extension)
        "
        />

      <ItemGroup>
        <Compile Condition=" '%(Flex.Compile)' == 'true' " Include="$(IntDir)%(Flex.SubDirectory)/lex.%(Flex.Prefix).c" />
      </ItemGroup>

      <RemoveDir
        Directories="$(IntDir)%(Flex.SubDirectory)/bisonflex-dist"
        />
  </Target>


  <!-- ======================================================================== -->
  <!--                             Install targets                              -->
  <!-- ======================================================================== -->
  <!-- TARGET: Install Data Files -->
  <Target
    Name="InstallData"
    Condition=" '@(InstallData)' != '' "
    >
      <MakeDir Directories="$(OutDir)$(DataOutputSubDir)" />

      <!-- Copy all installable data files. -->
      <Copy2
        SourceFiles="@(InstallData)"
        DestinationFolder="$(OutDir)$(DataOutputSubDir)%(InstallData.SubDirectory)">
          <Output TaskParameter="CopiedFiles" ItemName="FileWrites"/>
      </Copy2>
  </Target>

</Project>
