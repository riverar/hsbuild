<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Configuration/Platform defaults                            -->
  <PropertyGroup>
      <Configuration      Condition=" '$(Configuration)' == '' "                    >Debug</Configuration>
      <Platform           Condition=" '$(Platform)' == '' "                         >x86</Platform>
  </PropertyGroup>

  <!-- Intermediate initialization  - MAY be overridden           -->
  <PropertyGroup>
      <IntermediatePath   Condition=" '$(IntermediatePath)' == '' "                 >$(Platform)\$(Configuration)\obj\$(MSBuildProjectName)\</IntermediatePath>
      <IntermediatePath   Condition=" !HasTrailingSlash('$(IntermediatePath)') "    >$(IntermediatePath)\</IntermediatePath>

      <IntDir>$(IntermediatePath)</IntDir>
  </PropertyGroup>

  <!-- Output initialization        - is set by HSBUILD_PREFIX_PATH environment variable   -->
  <PropertyGroup>
      <OutputPath         Condition=" '$(HSBUILD_PREFIX_PATH)' != '' "              >$(HSBUILD_PREFIX_PATH)</OutputPath>
      <OutputPath                                                                   >$(OutputPath)$(Platform)\$(Configuration)\</OutputPath>

      <!-- Substitute OutputType synonyms to the default value for each OutputType -->
      <OutputType         Condition=" '$(OutputType)' == 'library' "                >dll</OutputType>
      <OutputType         Condition=" '$(OutputType)' == 'dynamic-library' "        >dll</OutputType>
      <OutputType         Condition=" '$(OutputType)' == 'static-library' "         >lib</OutputType>
      <OutputType         Condition=" '$(OutputType)' == '' "                       >exe</OutputType>

      <CleanFile          Condition=" '$(CleanFile)' == '' "                        >$(MSBuildProjectFile).CleanList.txt</CleanFile>
      <BinaryOutputPath>$(OutputPath)bin\</BinaryOutputPath>
      <LibraryOutputPath>$(OutputPath)lib\</LibraryOutputPath>
      <IncludeOutputPath>$(OutputPath)include\</IncludeOutputPath>
      <DataOutputPath>$(OutputPath)share\</DataOutputPath>
      <PkgConfigOutputPath>$(LibraryOutputPath)pkgconfig\</PkgConfigOutputPath>
  </PropertyGroup>

  <!-- Target initialization        - Can NOT be overridden       -->
  <PropertyGroup>
      <AssemblyName       Condition=" '$(AssemblyName)'=='' "                       >$(MSBuildProjectName)</AssemblyName>

      <!-- Suffix based on c-runtime -->
      <TargetSuffix       Condition=" '$(Configuration)' == 'Debug' "               >-$(CRTSuffix)d</TargetSuffix>
      <TargetSuffix       Condition=" '$(Configuration)' == 'Release' "             >-$(CRTSuffix)</TargetSuffix>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OutputType)' == 'exe' or '$(OutputType)' == 'winexe' ">
      <TargetExt>.exe</TargetExt>
      <TargetName>$(AssemblyName)</TargetName>
      <TargetFileName>$(TargetName)$(TargetExt)</TargetFileName>
      <TargetDir>$(BinaryOutputPath)</TargetDir>
      <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(OutputType)' == 'dll' ">
      <TargetExt>.dll</TargetExt>
      <TargetName>$(AssemblyName)$(TargetSuffix)</TargetName>
      <TargetFileName>$(TargetName)$(TargetExt)</TargetFileName>
      <TargetDir>$(BinaryOutputPath)</TargetDir>
      <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(OutputType)' == 'lib' ">
      <TargetExt>.lib</TargetExt>
      <TargetName>$(AssemblyName)</TargetName>
      <TargetFileName>$(TargetName)$(TargetExt)</TargetFileName>
      <TargetDir>$(LibraryOutputPath)</TargetDir>
      <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
  </PropertyGroup>

  <!-- Version properties - Initialize to 1.0.0.0 if not already set -->
  <PropertyGroup>
    <VersionMajor         Condition=" '$(VersionMajor)' == '' "                     >1</VersionMajor>
    <VersionMinor         Condition=" '$(VersionMinor)' == '' "                     >0</VersionMinor>
    <VersionMicro         Condition=" '$(VersionMicro)' == '' "                     >0</VersionMicro>
    <VersionNano          Condition=" '$(VersionNano)' == '' "                      >0</VersionNano>
    <Version              Condition=" '$(Version)' == '' "                          >$(VersionMajor).$(VersionMinor).$(VersionMicro).$(VersionNano)</Version>
    <VersionApi           Condition=" '$(VersionApi)' == '' "                       >$(VersionMajor).$(VersionMinor)</VersionApi>

    <VersionFull                                                                    >$(VersionMajor).$(VersionMinor).$(VersionMicro).$(VersionNano)</VersionFull>
  </PropertyGroup>

  <PropertyGroup>
    <BuildGenerateSourcesTargets>
      $(BuildGenerateSourcesTargets);
      GenerateConfigHeader;
      GenerateIntermediateFiles;
      GenerateSymbols;
    </BuildGenerateSourcesTargets>

    <BuildInstallTargets>
      $(BuildInstallTargets);
      InstallData;
    </BuildInstallTargets>
  </PropertyGroup>

  <!-- Import all HSBUILD tasks -->
  <PropertyGroup>
      <HSBuildTasksDir        Condition=" '$(HSBuildTasksDir)' == '' and '$(MSBuildExtensionsPath32)' != '' ">$(MSBuildExtensionsPath32)\HSBuild\</HSBuildTasksDir>
      <HSBuildTasksDir        Condition=" '$(HSBuildTasksDir)' == '' "              >$(MSBuildExtensionsPath)\HSBuild\</HSBuildTasksDir>
      <HSBuildTasksBin        Condition=" '$(HSBuildTasksBin)' == '' "              >HSBuildTasks.dll</HSBuildTasksBin>
      <HSBuildTasksPath       Condition=" '$(HSBuildTasksPath)' == '' "             >$(HSBuildTasksDir)$(HSBuildTasksBin)</HSBuildTasksPath>
      <HSBuildTemplates       Condition=" '$(HSBuildTemplates)' == '' "             >$(HSBuildTasksDir)templates\$(Platform)\</HSBuildTemplates>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(HSBuildToolPath)' == '' ">
      <HSBuildToolPath        Condition=" '$(HSBUILD_INSTALLED_PATH)' != '' "       >$(HSBUILD_INSTALLED_PATH)bin\</HSBuildToolPath>
  </PropertyGroup>

  <Import     Project="$(MSBuildToolsPath)\Microsoft.Common.Tasks" />
  <UsingTask  TaskName="Substitute"                AssemblyFile="$(HSBuildTasksPath)" />
  <UsingTask  TaskName="Aggregator"                AssemblyFile="$(HSBuildTasksPath)" />

  <Import     Project="HSBuild.PkgConfig.targets" />
  <Import     Project="HSBuild.BuildSteps.targets" />

  <!-- ======================================================================== -->
  <!--                             Generate targets                             -->
  <!-- ======================================================================== -->
  <!-- TARGET: Generate Config Header -->
  <Target
    Name="GenerateConfigHeader"
    Condition=" '$(DisableConfigHeaderGeneration)' != 'true' "
    >
      <ItemGroup>
          <AdditionalIncludeDirectories Include="$(IntermediatePath)" />
      </ItemGroup>

      <ItemGroup>
          <ConfigPreprocessor Include="VERSION $(Version)" />
          <ConfigPreprocessor Include="PACKAGE_VERSION &quot;$(Version)&quot;" />
          <ConfigPreprocessor Include="PACKAGE_DATADIR &quot;inavlid-for-win32&quot;" />
      </ItemGroup>

      <PropertyGroup Condition=" '$(ConfigHeader)' == '' ">
          <ConfigHeader>$(HSBuildTemplates)config.h</ConfigHeader>
      </PropertyGroup>

      <Copy
        SourceFiles="$(ConfigHeader)"
        DestinationFiles="$(IntDir)_config.h"
        Condition=" Exists ('$(ConfigHeader)')"
        />

      <WriteLinesToFile
        File="$(IntDir)_config.h"
        Lines="@(ConfigPreprocessor->'#define %(Identity)')"
        Condition=" '@(ConfigPreprocessor)' != '' and Exists ('$(IntDir)_config.h') "
        Overwrite="false"
        />

      <Copy
        SourceFiles="$(IntDir)_config.h"
        Condition=" Exists ('$(IntDir)_config.h') "
        DestinationFiles="$(IntDir)config.h"
        SkipUnchangedFiles="true"
        >
          <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
      </Copy>

      <Delete
        Files="$(IntDir)_config.h"
        Condition=" Exists ('$(IntDir)_config.h') "
        />
  </Target>

  <!-- TARGET: Generate intermediate files by substitution -->
  <Target
    Name="GenerateIntermediateFiles"
    Condition="'@(InFile)' != ''"
    >
      <MakeDir Condition="!Exists('$(IntDir)%(InFile.SubDirectory)')" Directories="$(IntDir)%(InFile.SubDirectory)" />

      <Substitute
        SourceFiles="@(InFile)"
        Expressions="%(InFile.Expressions)"
        OutputDirectory="$(IntDir)%(InFile.SubDirectory)"
        OutputFileName="%(InFile.OutputFileName)"
        >
          <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
      </Substitute>
  </Target>

  <!-- TARGET: GenerateSymbols -->
  <Target
    Name="GenerateSymbols"
    Condition=" '@(SymbolFile)' != '' and '$(DefFile)' == '' "
    >
      <PropertyGroup>
          <DefFile>$(IntDir)$(AssemblyName).def</DefFile>
      </PropertyGroup>

      <ItemGroup>
          <FileWrites Include="$(DefFile)" />
      </ItemGroup>

      <Aggregator
        SourceFiles="@(SymbolFile)"
        OutputFile="$(DefFile)"
        HeadLines="EXPORTS"
        />
  </Target>


  <!-- ======================================================================== -->
  <!--                             Install targets                              -->
  <!-- ======================================================================== -->
  <!-- TARGET: Install Data Files -->
  <Target
    Name="InstallData"
    Condition=" '@(DataFile)' != '' "
    >
      <MakeDir Directories="$(DataOutputPath)" />

      <!-- Copy all installable data files. -->
      <Copy
        SourceFiles="@(DataFile)"
        DestinationFolder="$(DataOutputPath)%(DataFile.SubDirectory)"
        SkipUnchangedFiles="true"
        OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)">
          <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
      </Copy>
  </Target>

</Project>
