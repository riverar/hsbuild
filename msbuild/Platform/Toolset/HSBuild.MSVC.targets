<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" >

  <UsingTask  TaskName="MSResourceCompiler"        AssemblyFile="$(HSBuildTasksPath)" />
  <UsingTask  TaskName="MSManifest"                AssemblyFile="$(HSBuildTasksPath)" />
  <UsingTask  TaskName="MSManifestResource"        AssemblyFile="$(HSBuildTasksPath)" />
  <UsingTask  TaskName="MSVCLib"                   AssemblyFile="$(HSBuildTasksPath)" />

  <PropertyGroup>
    <CCompileTargets>
      $(CCompileTargets);
      _EnsureClCompile;
      _PreprocessCCompile;
      _CCompile;
    </CCompileTargets>
    <ResourceCompileTargets>
      $(ResourceCompileTargets);
      _EnsureResourceCompile;
      _PreprocessResourceCompile;
      _ResourceCompile;
    </ResourceCompileTargets>
    <LinkTargets>
      $(LinkTargets);
      _PrepareLink;
      _Link;
      _GenerateLinkFileWrites;
    </LinkTargets>
    <LinkEmbedManifestTargets>
      $(LinkEmbedManifestTargets);
      _LinkEmbedManifest;
    </LinkEmbedManifestTargets>
  </PropertyGroup>

  <Target
    Name="_EnsureClCompile"
    Condition=" '@(Compile)' != ''"
    >
      <!-- Setup Cl compile sources if Compile used -->
      <ItemGroup>
          <ClCompile Include="@(Compile)" Condition="'%(Extension)'=='.c'" />
          <Compile Remove="@(ClCompile)" />
      </ItemGroup>
  </Target>
  <Target
    Name="_EnsureResourceCompile"
    Condition=" '@(Compile)' != ''"
    >
      <!-- Setup RC compile sources if Compile used -->
      <ItemGroup>
          <ResourceCompile Include="@(Compile)" Condition="'%(Extension)'=='.rc'" />
          <Compile Remove="@(ResourceCompile)" />
      </ItemGroup>
  </Target>
  <Target
    Name="_PreprocessResourceCompile"
    Condition=" '@(ResourceCompile)' != '' "
    >
      <Substitute
        SourceFiles="@(ResourceCompile)"
        Condition=" '%(ResourceCompile.Extension)' == '.in' "
        Expressions="%(ResourceCompile.SubstitutionExpressions)"
        OutputDirectory="$(IntDir)"
        >
          <Output TaskParameter="WrittenFiles" ItemName="FileWrites" />
          <Output TaskParameter="DestinationFiles" ItemName="ResourceCompile" />
      </Substitute>

      <ItemGroup>
          <ResourceCompile Remove="@(ResourceCompile)" Condition="'%(Extension)'=='.in'" />
      </ItemGroup>
  </Target>
  <Target
    Name="_PreprocessCCompile"
    Condition=" '@(ClCompile)' != '' "
    >
      <Substitute
        SourceFiles="@(ClCompile)"
        Condition=" '%(ClCompile.Extension)' == '.in' "
        Expressions="%(ClCompile.SubstitutionExpressions)"
        OutputDirectory="$(IntDir)"
        >
          <Output TaskParameter="WrittenFiles" ItemName="FileWrites" />
          <Output TaskParameter="DestinationFiles" ItemName="ClCompile" />
      </Substitute>

      <ItemGroup>
          <ClCompile Remove="@(ClCompile)" Condition="'%(Extension)'=='.in'" />
      </ItemGroup>
  </Target>

  <Target
    Name="CCompile"
    DependsOnTargets="$(CCompileTargets)"
    />
  <Target
    Name="ResourceCompile"
    DependsOnTargets="$(ResourceCompileTargets)"
    />

  <!-- TARGET: Compile resource files (.rc) To Object -->
  <Target
    Name="_ResourceCompile"
    Condition=" '@(ResourceCompile)' != '' "
    >
      <!-- Compile resources -->
      <MSResourceCompiler Condition="'%(ResourceCompile.ExcludedFromBuild)'!='true'"
        SourceFile="%(ResourceCompile.Identity)"
        OutputFile="$(IntDir)%(ResourceCompile.FileName).res"
        AdditionalIncludeDirectories="%(ResourceCompile.AdditionalIncludeDirectories)"
        PreprocessorDefinitions="%(ResourceCompile.PreprocessorDefinitions)"
        AdditionalOptions="%(ResourceCompile.AdditionalOptions)"
        Verbose="%(ResourceCompile.Verbose)"
        />

      <ItemGroup>
        <Obj Include="@(ResourceCompile->'$(IntDir)%(FileName).res')" Condition="'%(ResourceCompile.ExcludedFromBuild)'!='true'">
          <LinkCompiled>%(ClCompile.LinkCompiled)</LinkCompiled>
          <LibCompiled>%(ClCompile.LibCompiled)</LibCompiled>
        </Obj>
        <FileWrites Include="@(ResourceCompile->'$(IntDir)%(FileName).res')" Condition="'%(ResourceCompile.ExcludedFromBuild)'!='true'" />
      </ItemGroup>
  </Target>

  <!-- TARGET: TransformObjOutput -->
  <Target
    Name="TransformObjOutput"
    Condition=" '@(Obj)' != '' "
    >
      <!-- FIXME: We don't support library OutputType yet. -->
      <Error Condition=" '$(OutputType)' == 'library' " Text="OutputType == library -> Not yet supported." />

      <ItemGroup>
        <Link Include="@(Obj)" Condition=" '%(Obj.LinkCompiled)' == 'true' " />
        <Lib Include="@(Obj)" Condition=" '%(Obj.LibCompiled)' == 'true' " />
        <DumpSymbols Include="@(Obj)" Condition=" '%(Obj.GenerateSymbols)' == 'true' ">
          <SymbolsFile>%(Obj.SymbolsFile)</SymbolsFile>
        </DumpSymbols>

        <_LinkOutputFile Include="%(Link.OutputFile)" Condition=" '%(Link.OutputFile)' != '' AND '%(Link.ManifestFile)' != '' ">
          <Dll>%(Link.LinkDLL)</Dll>
          <ManifestFile>%(Link.ManifestFile)</ManifestFile>
        </_LinkOutputFile>
      </ItemGroup>

      <ItemGroup Condition=" '$(OutputType)' != 'lib' AND '$(EmbedManifest)' != 'true' ">
        <Manifest Include="%(_LinkOutputFile.ManifestFile)">
          <OutputManifestFile>%(_LinkOutputFile.Identity).manifest</OutputManifestFile>
        </Manifest>
      </ItemGroup>
      <ItemGroup Condition=" '$(OutputType)' != 'lib' AND '$(EmbedManifest)' == 'true' AND '$(EmbedManifestBy)' == 'LINK' ">
        <Manifest Include="%(_LinkOutputFile.ManifestFile)">
          <OutputManifestFile>$(IntDir)%(_LinkOutputFile.FileName).embed.manifest</OutputManifestFile>
        </Manifest>
        <ManifestResourceCompile Include="$(IntDir)%(_LinkOutputFile.FileName).embed.manifest">
          <Dll>%(_LinkOutputFile.Dll)</Dll>
          <OutputResourceFile>$(IntDir)%(_LinkOutputFile.FileName).res</OutputResourceFile>
        </ManifestResourceCompile>
      </ItemGroup>
      <ItemGroup Condition=" ('$(OutputType)'=='exe' OR '$(OutputType)'=='winexe') AND '$(EmbedManifest)' == 'true' AND '$(EmbedManifestBy)' == 'MT' ">
        <Manifest Include="%(_LinkOutputFile.ManifestFile)">
          <OutputResourceManifests>%(_LinkOutputFile.Identity);#1</OutputResourceManifests>
        </Manifest>
      </ItemGroup>
      <ItemGroup Condition=" ('$(OutputType)'=='dll' OR '$(OutputType)'=='library') AND '$(EmbedManifest)' == 'true' AND '$(EmbedManifestBy)' == 'MT' ">
        <Manifest Include="%(_LinkOutputFile.ManifestFile)">
          <OutputResourceManifests>%(_LinkOutputFile.Identity);#2</OutputResourceManifests>
        </Manifest>
      </ItemGroup>
  </Target>

  <!-- TARGET: ManifestResourceCompile -->
  <Target
    Name="ManifestResourceCompile"
    Condition=" '@(ManifestResourceCompile)' != '' "
    >
      <Touch
        Files                           ="@(ManifestResourceCompile)"
        Condition                       =" !Exists('%(ManifestResourceCompile.Identity)') "
        AlwaysCreate                    ="true"
        >
          <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
      </Touch>

      <MSManifestResource
        Condition                       ="'$(EmbedManifestby)'=='LINK'"
        Manifest                        ="@(ManifestResourceCompile)"
        Dll                             ="%(ManifestResourceCompile.Dll)"
        OutputResource                  ="%(ManifestResourceCompile.OutputResourceFile)"
        />

      <ItemGroup>
        <Link Include="%(ManifestResourceCompile.OutputResourceFile)" />
        <FileWrites Include="%(ManifestResourceCompile.OutputResourceFile)" />
      </ItemGroup>
  </Target>

  <Target
    Name="Manifest"
    Condition=" '@(Manifest)' != '' "
    >
      <MSManifest
        Sources                     ="@(Manifest)"
        AdditionalOptions           ="%(Manifest.AdditionalOptions)"
        AssemblyIdentity            ="%(Manifest.AssemblyIdentity)"
        ComponentFileName           ="%(Manifest.ComponentFileName)"
        GenerateCatalogFiles        ="%(Manifest.GenerateCatalogFiles)"
        GenerateCategoryTags        ="%(Manifest.GenerateCategoryTags)"
        InputResourceManifests      ="%(Manifest.InputResourceManifests)"
        OutputResourceManifests     ="%(Manifest.OutputResourceManifests)"
        ManifestFromManagedAssembly ="%(Manifest.ManifestFromManagedAssembly)"
        OutputManifestFile          ="%(Manifest.OutputManifestFile)"
        RegistrarScriptFile         ="%(Manifest.RegistrarScriptFile)"
        ReplacementsFile            ="%(Manifest.ReplacementsFile)"
        SuppressDependencyElement   ="%(Manifest.SuppressDependencyElement)"
        SuppressStartupBanner       ="%(Manifest.SuppressStartupBanner)"
        TypeLibraryFile             ="%(Manifest.TypeLibraryFile)"
        UpdateFileHashes            ="%(Manifest.UpdateFileHashes)"
        UpdateFileHashesSearchPath  ="%(Manifest.UpdateFileHashesSearchPath)"
        />

      <!-- Re-compile manifest resource files! -->
      <MSManifestResource
        Condition                       ="'$(EmbedManifestby)'=='LINK'"
        Manifest                        ="@(ManifestResourceCompile)"
        Dll                             ="%(ManifestResourceCompile.Dll)"
        OutputResource                  ="%(ManifestResourceCompile.OutputResourceFile)"
        />
  </Target>

  <!-- TARGET: Lib -->
  <Target
    Name="Lib"
    Condition=" '@(Lib)' != '' "
    >
      <MakeDir Directories="$(OutDir)$(LibraryOutputSubDir)" />
      <MakeDir Directories="$(TargetDir)" />

      <ItemGroup>
        <!-- Add default ModuleDefinitionsFile created from @(SymbolFile) items. -->
        <Lib>
          <ModuleDefinitionFile Condition=" '%(Lib.ModuleDefinitionFile)' == '' ">$(SymbolFileGenModuleDefFile)</ModuleDefinitionFile>
          <SubSystem Condition="'%(Lib.SubSystem)' == ''">CONSOLE</SubSystem>
        </Lib>
      </ItemGroup>

      <MSVCLib
        ToolPath                       ="$(MSVCToolPath)"

        Sources                        ="@(Lib)"

        AdditionalDependencies         ="%(Lib.AdditionalDependencies);@(AdditionalDependencies)"
        AdditionalLibraryDirectories   ="%(Lib.AdditionalLibraryDirectories);@(AdditionalLibraryDirectories)"
        AdditionalOptions              ="%(Lib.AdditionalOptions)"

        ErrorReporting                 ="%(Lib.LinkErrorReporting)"

        ForceSymbolReferences          ="%(Lib.ForceSymbolReferences)"
        IgnoreAllDefaultLibraries      ="%(Lib.IgnoreAllDefaultLibraries)"
        IgnoreSpecificDefaultLibraries ="%(Lib.IgnoreSpecificDefaultLibraries)"
        LinkTimeCodeGeneration         ="%(Lib.LinkTimeCodeGeneration)"
        ModuleDefinitionFile           ="%(Lib.ModuleDefinitionFile)"
        Name                           ="%(Lib.Name)"
        OutputFile                     ="%(Lib.OutputFile)"

        SubSystem                      ="%(Lib.SubSystem)"
        SuppressStartupBanner          ="%(Lib.SuppressStartupBanner)"
        TargetMachine                  ="%(Lib.TargetMachine)"
        TreatLibWarningAsErrors        ="%(Lib.TreatLinkerWarningAsErrors)"
        Verbose                        ="%(Lib.Verbose)"
        />
  </Target>

  <Target
    Name="Link"
    DependsOnTargets="$(LinkTargets)"
    />

  <Target
    Name="LinkEmbedManifest"
    DependsOnTargets="$(LinkEmbedManifestTargets)"
    />

  <Target
    Name="_PrepareLink"
    Condition=" '@(Link)' != '' "
    >
      <Error Condition=" '%(Link.OutputFile)' == '' " Text="Link item missing OutputFile metadata." />

      <MakeDir Directories="$(OutDir)$(LibraryOutputSubDir)" />
      <MakeDir Directories="$(OutDir)$(BinaryOuputSubDir)" />
      <MakeDir Directories="$(OutDir)$(PDBOutputSubDir)" />
      <MakeDir Directories="$(TargetDir)" />

      <!-- LINK -->
      <PropertyGroup Condition="'$(LinkIncremental)' == ''">
          <LinkIncremental>true</LinkIncremental>
          <LinkIncremental Condition=" '$(MSBuildProjectDefaultTargets)' == 'Rebuild' ">false</LinkIncremental>
      </PropertyGroup>

      <ItemGroup>
        <Link Condition="'%(Link.SubSystem)' == ''">
          <SubSystem Condition="'$(OutputType)'=='exe'">CONSOLE</SubSystem>
          <SubSystem Condition="'$(OutputType)'=='dll'">CONSOLE</SubSystem>
          <SubSystem Condition="'$(OutputType)'=='library'">CONSOLE</SubSystem>
          <SubSystem Condition="'$(OutputType)'=='winexe'">WINDOWS</SubSystem>
        </Link>
        <!-- Add default ModuleDefinitionsFile created from @(SymbolFile) items. -->
        <Link>
          <ModuleDefinitionFile Condition=" '%(Link.ModuleDefinitionFile)' == '' ">$(SymbolFileGenModuleDefFile)</ModuleDefinitionFile>
        </Link>
      </ItemGroup>
  </Target>

  <Target
    Name="_GenerateLinkFileWrites"
    Condition=" '@(Link)' != '' "
    >
      <ItemGroup>
        <FileWrites Include="%(Link.OutputFile)" />
        <FileWrites Include="%(Link.ImportLibrary)" />
        <FileWrites Include="%(Link.ProgramDatabaseFile)" />
        <FileWrites Include="%(Link.StripPrivateSymbols)" />
        <FileWrites Include="%(Link.MapFileName)" />
        <FileWrites Include="%(Link.ManifestFile)" />
        <FileWrites Include="%(Link.ProfileGuidedDatabase)" />
        <FileWrites Condition="Exists('$(TargetDir)$(TargetName).ilk')" Include="$(TargetDir)$(TargetName).ilk" />
        <FileWrites Condition="Exists('$(OutDir)$(LibraryOutputSubDir)$(AssemblyName).exp')" Include="$(OutDir)$(LibraryOutputSubDir)$(AssemblyName).exp" />
      </ItemGroup>
  </Target>

</Project>

